import streamlit as st
from datetime import datetime
import base64
from typing import Dict


def create_downloadable_txt(content: str, filename: str) -> str:
    b64 = base64.b64encode(content.encode()).decode()
    return f'<a href="data:file/txt;base64,{b64}" download="{filename}" class="action-button" style="text-decoration: none; display: inline-block; margin: 0.5rem;">ðŸ“¥ Download {filename}</a>'


def add_to_watchlist(item: Dict, content_type: str):
    if "watchlist" not in st.session_state:
        st.session_state.watchlist = []

    if content_type == "movie":
        watchlist_item = {
            "type": "movie",
            "title": item.get("Title", "Unknown"),
            "year": item.get("Year", "Unknown"),
            "plot": item.get("Plot", "No plot available"),
            "poster": item.get("Poster", ""),
            "added_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
    else:
        watchlist_item = {
            "type": "anime",
            "title": item.get("title", "Unknown"),
            "episodes": item.get("episodes", "Unknown"),
            "synopsis": item.get("synopsis", "No synopsis available"),
            "image": item.get("images", {}).get("jpg", {}).get("image_url", ""),
            "added_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }

    for existing_item in st.session_state.watchlist:
        if existing_item["title"] == watchlist_item["title"]:
            st.warning(f"'{watchlist_item['title']}' is already in your watchlist!")
            return

    st.session_state.watchlist.append(watchlist_item)
    st.success(f"âœ… Added '{watchlist_item['title']}' to watchlist!")


def save_movie_info(movie: Dict):
    content = f"""ðŸŽ¬ MOVIE INFORMATION
{'='*50}

ðŸŽ¥ BASIC INFO
Title: {movie.get('Title', 'Unknown')}
Year: {movie.get('Year', 'Unknown')}
Runtime: {movie.get('Runtime', 'Unknown')}
Director: {movie.get('Director', 'Unknown')}
Cast: {movie.get('Actors', 'Unknown')}
Genre: {movie.get('Genre', 'Unknown')}
IMDb Rating: {movie.get('imdbRating', 'Unknown')}

ðŸ“… Saved on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Generated by Novara - Your Ultimate Movies & Anime Search Hub
"""

    st.markdown(
        create_downloadable_txt(
            content, f"{movie.get('Title', 'movie').replace(' ', '_')}_info.txt"
        ),
        unsafe_allow_html=True,
    )
    st.success("ðŸ“¥ Movie information ready for download!")


def save_anime_info(anime: Dict):
    content = f"""ðŸŽŒ ANIME INFORMATION
{'='*50}

ðŸ“º BASIC INFO
Title: {anime.get('title', 'Unknown')}
Episodes: {anime.get('episodes', 'Unknown')}
Status: {anime.get('status', 'Unknown')}
Score: {anime.get('score', 'N/A')}/10
Studio: {', '.join([studio['name'] for studio in anime.get('studios', [])]) if anime.get('studios') else 'Unknown'}
Genres: {', '.join([genre['name'] for genre in anime.get('genres', [])]) if anime.get('genres') else 'Unknown'}
Synopsis: {anime.get('synopsis', 'No synopsis available')}

ðŸ“… Saved on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Generated by Novara
"""

    st.markdown(
        create_downloadable_txt(
            content, f"{anime.get('title', 'anime').replace(' ', '_')}_info.txt"
        ),
        unsafe_allow_html=True,
    )
    st.success("ðŸ“¥ Anime information ready for download!")
